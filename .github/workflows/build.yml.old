# Copyright (c) 2025, Antoine Duval
# This file is part of a source-visible project.
# See LICENSE for terms. Unauthorized use is prohibited.

permissions:
  contents: write

name: Build cross-platform

on:
  push:
    branches:
      - main

jobs:
  # On créé la version Linux de l'application.
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # On installe les dépendances de l'application.
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y nlohmann-json3-dev libopencv-dev tesseract-ocr libtesseract-dev
      # On compile le code C++ de l'application.
      - name: Build
        run: |
          mkdir -p build && cd build
          cmake -DSOURCE_FILE=src/detector/script.cpp ..
          make
          mkdir -p release
          cp linux release/linux
      # On upload la release.
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: build/release/linux

  # On créé la version MacOS de l'application.
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      # On installe les dépendances de l'application.
      - name: Install dependencies
        run: brew install opencv tesseract nlohmann-json
      # On compile le code C++ de l'application.
      - name: Build
        run: |
          mkdir -p build && cd build
          cmake -DSOURCE_FILE=src/detector/script.cpp -DCMAKE_CXX_FLAGS="-I/opt/homebrew/include" -DCMAKE_EXE_LINKER_FLAGS="-L/opt/homebrew/lib" ..
          make
          mkdir -p release
          cp darwin release/darwin
      # On upload la release.
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: darwin
          path: build/release/darwin

  # On créé la version Windows de l'application.
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      # On installe vcpkg
      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
      # On installe les dépendances précompilées du code C++
      - name: Download preinstalled vcpkg dependencies
        run: |
          Invoke-WebRequest -Uri https://evabattleplan.com/back/wp-content/uploads/vcpkg.zip -OutFile vcpkg.zip
          Expand-Archive -Path vcpkg.zip -DestinationPath vcpkg
      # On installe pkgconfiglite
      - name: Install pkg-config
        run: choco install -y pkgconfiglite
      # On compile le code C++ de l'application.
      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. `
            -DCMAKE_TOOLCHAIN_FILE="${env:GITHUB_WORKSPACE}\vcpkg\scripts\buildsystems\vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET=x64-windows `
            -DOpenCV_DIR="${env:GITHUB_WORKSPACE}\vcpkg\installed\x64-windows\share\opencv"
          cmake --build . --config release
      # On upload la release.
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows.exe
          path: build/Release/windows.exe

  # On déploie les nouvelles versions
  deploy-builds:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    steps:
      # On récupère le numéro de version de l'application.
      - name: Get version from package.json
        id: get_version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Download linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux
          path: ./release

      - name: Download darwin artifact
        uses: actions/download-artifact@v4
        with:
          name: darwin
          path: ./release

      - name: Download windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows.exe
          path: ./release

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload linux asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/linux
          asset_name: linux
          asset_content_type: application/octet-stream

      - name: Upload MacOS asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/darwin
          asset_name: darwin
          asset_content_type: application/octet-stream

      - name: Upload Windows asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/windows.exe
          asset_name: windows.exe
          asset_content_type: application/octet-stream
